#!/usr/bin/env ruby

$:<< File.expand_path("../../lib", __FILE__)
require 'mt/proxy'
require 'thor'
require 'json'
require 'net/http'


class CLI < Thor

  desc "stats", "show stats for the given server"
  method_option :redis, type: :string, default: 'redis://127.0.0.1:6379', desc: "redis server"
  method_option :proxy, type: :string, required: true, desc: "proxy server"
  def stats
    db = redis
    proxy = options[:proxy]
    public_address, started_at = *db.mget("#{proxy}:goes_as", "#{proxy}:registered_at")
    unless  public_address
      puts "Not found"
      exit
    end
    restarted_at = Time.at(started_at.to_i)

    requests_keys = db.keys("#{proxy}:since:#{started_at}:*:requests")
    hosts = requests_keys.present? ? Hash[*requests_keys.zip(db.mget(requests_keys)).map do |(key, value)|
      [ $1, value.to_i ] if key =~ %r{#{proxy}:since:#{started_at}:(.+):requests}
    end.compact.flatten] : {}

    total_requests, request_since_last_restarted = *db.mget("#{proxy}:requests", "#{proxy}:since:#{started_at}:requests")
    info = {
      public_address: public_address,
      restarted_at: "#{restarted_at} (#{Time.current.to_i - started_at.to_i} seconds ago)",
      stats: {
        total: {
          requests: total_requests.to_i,
        },
        since_last_restart: {
          total: request_since_last_restarted.to_i,
          hosts: hosts
        }
      }

    }
    puts JSON.pretty_generate(info)
  end

  desc "check", "check status of the proxy servers"
  method_option :redis, type: :string, default: 'redis://127.0.0.1:6379', desc: "redis server"
  method_option :pool, type: :string,  desc: "pool"

  def check
    db = redis
    status = {}
    require 'pp'
    limits = {
      "default" => 1,
      "vpn"     => 2,
      "fastvpn" => 1,
      "yelp"    => 1
    }

    redis.keys("pools:*").each do |pool|
      pool.gsub!(/^pools:/,'')
      next if options[:pool] and pool != options[:pool]
      proxies = db.lrange pool, 0, -1
      count = 0
      proxies_no = 0
      loop do
        count += 1
        proxies_no = 0
        proxies.each_with_object(status) do |proxy,info|
          public_address, started_at = *db.mget("#{proxy}:goes_as", "#{proxy}:registered_at")
          next if public_address.nil?
          proxies_no += 1
        end
        break if (limits[pool] || 0) <= proxies_no
        break if count > 2
        sleep 60
      end
      STDERR.puts "pool: #{pool} - #{proxies_no} instead of #{limits[pool]}" if limits[pool] > proxies_no
    end    
  end

  desc "status", "status of the proxy servers"
  method_option :redis, type: :string, default: 'redis://127.0.0.1:6379', desc: "redis server"
  method_option :pool, type: :string,  desc: "pool"

  def status
    db = redis
    status = {}
    require 'pp'
    redis.keys("pools:*").each do |pool|
      pool.gsub!(/^pools:/,'')
      next if options[:pool] and pool != options[:pool]
      proxies = db.lrange pool, 0, -1
      proxies.each_with_object(status) do |proxy,info|
        public_address, started_at = *db.mget("#{proxy}:goes_as", "#{proxy}:registered_at")
        next if public_address.nil?
        restarted_at = Time.at(started_at.to_i)

        requests_keys = db.keys("#{proxy}:since:#{started_at}:*:requests")
        hosts = requests_keys.present? ? Hash[*requests_keys.zip(db.mget(requests_keys)).map do |(key, value)|
          [ $1, value.to_i ] if key =~ %r{#{proxy}:since:#{started_at}:(.+):requests}
        end.compact.flatten] : {}

        total_requests, request_since_last_restarted = *db.mget("#{proxy}:requests", "#{proxy}:since:#{started_at}:requests")
        info[proxy] = {
          public_address: public_address,
          pool: pool,
          restarted_at: "#{restarted_at} (#{Time.current.to_i - started_at.to_i} seconds ago)",
          stats: {
            total: {
              requests: total_requests.to_i,
            },
            since_last_restart: {
              total: request_since_last_restarted.to_i,
              hosts: hosts
            }
          }

        }
      end
    end
    puts JSON.pretty_generate(status)

  end

  desc "console", "stars a shell"
  def console
    db = redis
    pry MT::Proxy
  end

  desc "limits", "manage limits"
  method_option :redis, type: :string, default: 'redis://127.0.0.1:6379', desc: "redis server"
  method_option :set, type: :string, desc: "the hostname"
  method_option :unset, type: :string, desc: "the hostname"
  method_option :requests, type: :numeric, desc: "number of requests"
  method_option :pool, type: :string, desc: "pool name", default: MT::Proxy.pool

  def limits
    db = redis
    if options[:set]
      requests = options[:requests].to_i
      if requests == 0
        puts "Number of requests must be > 0"
        return
      end
      MT::Proxy.set_limit options[:set], requests, options[:pool]
      return
    end

    if options[:unset]
      MT::Proxy.unset_limit options[:unset], options[:pool]
      return
    end

    puts JSON.pretty_generate(MT::Proxy.limits options[:pool])

  end



  private

  def redis(reload=false)
    @redis = nil if reload
    @redis ||= begin
      MT::Proxy.redis= Redis.new(url: options[:redis])
      MT::Proxy.redis
    end
  end


end

CLI.start
